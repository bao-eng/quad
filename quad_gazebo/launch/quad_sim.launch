<?xml version="1.0"?>
<launch>

  <!-- roslaunch arguments -->
  <env name="GAZEBO_MODEL_PATH" value="$(find quad_description)"/>
  <env name="GAZEBO_RESOURCE_PATH" value="$(find quad_description)"/>
  <arg name="namespace" default="quad"/>
  <arg name="cmd_timeout" default="0.5"/>
  
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>

  <!-- rbcar_control launch file -->
  <!--  -->include file="$(find rbcar_control)/launch/rbcar_control.launch" /-->
  
  <!-- include file="$(find rbcar_robot_control)/launch/rbcar_robot_control.launch"/ -->

  <!-- rbcar_joy launch file -->
  <!-- Include this file only if you wish a the control the robot via joystick, it has to be commented if you want to set goals for autonomous navigation -->
  <!-- for this node to work correctly first you need to succesfully connect the ps3 joystick with:
		sudo su
		rosrun ps3joy sixpair
		rosrun ps3joy ps3joy.py
  -->
  <!-- include file="$(find rbcar_joystick)/launch/rbcar_joy.launch" / -->

  <include file="$(find quad_gazebo)/launch/quad_control.launch"/>


  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rbcar_gazebo)/worlds/rbcar.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="false"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro '$(find quad_description)/urdf/quad.xacro' --inorder" />
         
  <!-- Call a python script to the run a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model rbcar -param robot_description -z 1"/>  

  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/-->  
  <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" /-->      
  <rosparam command="load" file="$(find quad_gazebo)/config/rbcar_robot_control.yaml"/>
  <node name="rbcar_robot_control" pkg="rbcar_robot_control" type="rbcar_robot_control_node" output="screen">
  	<remap from="joint_states" to="quad/joint_states"/>
  </node>
  
  <!--start twist to ackermannDrive converter for robot steering plugin -->
  <node pkg="quad_description" name="twist_to_ackermannDrive" type="twist_to_ackermannDrive.py" args="twistToAckermannDrive:=rbcar_robot_control/command"/>
  <!-- start rqt robot steering module -->
  <node pkg="rqt_robot_steering" name="rqt_robot_steering" type="rqt_robot_steering"/>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find quad_teleop)/rviz/quad.rviz" />

</launch>
